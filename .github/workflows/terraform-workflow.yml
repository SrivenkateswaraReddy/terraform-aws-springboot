name: Terraform

on:
  push:
    branches:
    - main
    - master
  pull_request:
    branches:
    - main
    - master

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_VERSION: 1.8.3 # specify the Terraform version you want to use
      TF_WORKING_DIR: ./ # specify your Terraform configuration directory
      ENV_VAR: terraform_s3_backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # specify the AWS region

    # - name: Terraform Init
    #   run: terraform init -backend-config="bucket=${{env.S3_BUCKET}}" \ -backend-config="key=${{env.S3_KEY}}" \ -backend-config="region=${{env.AWS_REGION}}" \ -backend-config="dynamodb_table=${{env.DYANMO_DB_TABLE}}" \ -backend-config="encrypt=${{env.S3_ENCRYPT}}"
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Init
    #   run: terraform init
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Format
    #   run: terraform fmt -check
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Validate
    #   run: terraform validate
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Plan
    #   id: plan
    #   run: terraform plan -out=plan.tfplan
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Plan JSON
    #   if: always()
    #   run: terraform show -json plan.tfplan | tee plan.json
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Upload Plan to GitHub Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: terraform-plan
    #     path: ${{ env.TF_WORKING_DIR }}/plan.json

    # - name: Terraform destroy
    #   if: github.event_name == 'push'
    #   run: terraform destroy -auto-approve plan.tfplan
    #   working-directory: ${{ env.TF_WORKING_DIR }}

    # - name: Terraform Apply
    #   if: github.event_name == 'push'
    #   run: terraform apply -auto-approve plan.tfplan
    #   working-directory: ${{ env.TF_WORKING_DIR }}
